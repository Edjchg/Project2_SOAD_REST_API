
version: "3.2"
services:
  # Building the rabbitmq service:
  rabbitmq:
    # Pulling the image with rabbitmq:
    image: rabbitmq:3-management-alpine
    # Naming the container:
    container_name: 'rabbitmq'
    # Exporting the required ports:
    ports:
        - '5673:5673'
        - '5672:5672'
        - '15672:15672'
    # Assigning the network to the container:
    networks:
      - network
    # Checking the health of the server by trying conections:
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "15672"]
      interval: 5s
      timeout: 5s
      retries: 30
  # Building the nlp service 1:
  nlp1:
    # Calling the Dockerfile inside broker_src for building the container:
    build: ./nlp
    environment:
      # The location of the RabbitMQ server.  "amqp" is the protocol;
      # "rabbitmq" is the hostname.  Note that there is not a guarantee
      # that the server will start first!  Telling the pika client library
      # to try multiple times gets around this ordering issue.
      AMQP_URL: 'amqp://rabbitmq?connection_attempts=20&retry_delay=5'
    # This command stablish that this container is ready only when rabbitmq service is up:
    depends_on:
       rabbitmq:
        condition: service_healthy
    # Assigning the network to the container:
    networks:
      - network
  # Building the nlp service 1:
  nlp2:
    # Calling the Dockerfile inside broker_src for building the container:
    build: ./nlp
    environment:
      # The location of the RabbitMQ server.  "amqp" is the protocol;
      # "rabbitmq" is the hostname.  Note that there is not a guarantee
      # that the server will start first!  Telling the pika client library
      # to try multiple times gets around this ordering issue.
      AMQP_URL: 'amqp://rabbitmq?connection_attempts=20&retry_delay=5'
    # This command stablish that this container is ready only when rabbitmq service is up:
    depends_on:
      rabbitmq:
        condition: service_healthy
    # Assigning the network to the container:
    networks:
      - network

# Defining the common network
networks:
  network:
    external: true

# Some useful commands:

#docker network create rabbitmq_go_net
#sudo docker-compose up -d --build

#sudo service rabbitmq-server start
#sudo service rabbitmq-server stop

#docker exec -it faa ping another;      para hacer ping entre containers
