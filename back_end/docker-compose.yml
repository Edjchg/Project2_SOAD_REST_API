
version: "3.2"
services:

  # _________________________________Building the rabbitmq service__________________________

  rabbitmq:
    # Pulling the image with rabbitmq:
    image: rabbitmq:3-management-alpine
    # Naming the container:
    container_name: 'rabbitmq'
    # Exporting the required ports:
    ports:
        - '5673:5673'
        - '5672:5672'
        - '15672:15672'
    # Assigning the network to the container:
    networks:
      - network
    # Checking the health of the server by trying conections:
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "15672"]
      interval: 5s
      timeout: 5s
      retries: 30

  # _________________________________Building the nlp service (1)__________________________

  nlp1:
    # Calling the Dockerfile inside broker_src for building the container:
    build: ./nlp
    container_name: 'nlp1'
    environment:
      # The location of the RabbitMQ server.  "amqp" is the protocol;
      # "rabbitmq" is the hostname.  Note that there is not a guarantee
      # that the server will start first!  Telling the pika client library
      # to try multiple times gets around this ordering issue.
      AMQP_URL: 'amqp://rabbitmq?connection_attempts=20&retry_delay=5'
    # This command stablish that this container is ready only when rabbitmq service is up:
    depends_on:
       rabbitmq:
        condition: service_healthy
    # Assigning the network to the container:
    networks:
      - network

  # _________________________________Building the nlp service (2)__________________________

  nlp2:
    # Calling the Dockerfile inside broker_src for building the container:
    build: ./nlp
    container_name: 'nlp2'
    environment:
      # The location of the RabbitMQ server.  "amqp" is the protocol;
      # "rabbitmq" is the hostname.  Note that there is not a guarantee
      # that the server will start first!  Telling the pika client library
      # to try multiple times gets around this ordering issue.
      AMQP_URL: 'amqp://rabbitmq?connection_attempts=20&retry_delay=5'
    # This command stablish that this container is ready only when rabbitmq service is up:
    depends_on:
      rabbitmq:
        condition: service_healthy
    # Assigning the network to the container:
    networks:
      - network
    
  # __________________________Building the storage service (1) and (2)__________________________

  storage1:
    build: ./storage
    container_name: 'storage1'
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      AMQP_URL: 'amqp://rabbitmq?connection_attempts=20&retry_delay=5'
    volumes:
      - shared_files:/storage_api/tempfile
    networks:
      - network
    
  storage2:
    build: ./storage
    container_name: 'storage2'
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      AMQP_URL: 'amqp://rabbitmq?connection_attempts=20&retry_delay=5'
    volumes:
    - shared_files:/storage_api/tempfile
    networks:
      - network

  # __________________________Building the sql sever service__________________________

  sqlserver:
    container_name: 'sql_server'
    image: mcr.microsoft.com/mssql/server:latest
    build: 
      context: .
      dockerfile: sql_server/Dockerfile
    ports: 
      - "1433:1433"
    volumes:
      - mssqldata:/var/opt/mssql
    networks: 
      sql_net: 
        ipv4_address: 192.168.32.2

  sqlserver_api: 
    container_name: 'sqlserver_api'
    build: ./sql_api
    ports: 
      - "9080:9080"
    environment:
      - ConnectionString=Data Source=server;Initial Catalog=proyect2_database;User Id=sa;Password=ProyectSOA123;Pooling=False;Max Pool Size=200;MultipleActiveResultSets=True
    depends_on: 
      - sqlserver
    networks: 
      sql_net: 
        ipv4_address: 192.168.32.3
  
  sqlserver_broker:
    build: ./sqlserver_broker
    container_name: 'sqlserver_broker'
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      AMQP_URL: 'amqp://rabbitmq?connection_attempts=20&retry_delay=5'
    networks:
      - network
      - sql_net

    # __________________________Building the front api service__________________________
  front_api:
    build: ./translatorAPI
    container_name: 'front_api'
    ports:
      - "4000:4000"
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - network


# Defining the commons network
networks:
  network:
    external: true
  sql_net: 
    ipam:
      config:
        - subnet: 192.168.32.0/24
          gateway: 192.168.32.1

# Defining the commons volume
volumes:
  shared_files:
    external: true
  mssqldata:

# Some useful commands:

#docker network create rabbitmq_go_net
#sudo docker-compose up -d --build

#sudo service rabbitmq-server start
#sudo service rabbitmq-server stop

#docker exec -it faa ping another;      para hacer ping entre containers
